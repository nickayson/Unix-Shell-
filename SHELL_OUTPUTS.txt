osh>cat unixshell.c
// Nicholas Ayson
// Due on March 28, 2021
// Unix Shell project

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>

#define MAX_LINE        100 //100 chars per line, per command 
#define READ_END        0
#define WRITE_END       1

//Function that calls for user input
void Input(char *args[], bool *Ampsign, int *numOfElem)
{
        char input[MAX_LINE];
    int lengthinput = read(STDIN_FILENO, input, 80);
    char delimiter[] = " ";

        // given
        if (lengthinput > 0 && input[lengthinput - 1] == '\n')
    {
        input[lengthinput - 1] = '\0';
    }
    if (strcmp(input, "!!") == 0)
        {
        if (*numOfElem == 0)
                {
            printf("No commands in history.\n");
        }
                return;
    }
        if (strcmp(input, "exit") == 0)
        {
                exit(0);
        }

        for(int i = 0; i < *numOfElem; i++)
        {
                args[i] = NULL;
        }

    *numOfElem = 0;
    *Ampsign = false;

        char *ptr = strtok(input, delimiter);

        //Breaks the input to use
        while(ptr != NULL)
        {
                //If an ampersand
                if (ptr[0] == '&')
                {
            *Ampsign = true;                            //Flag if program detects an ampersand
            ptr = strtok(NULL, delimiter);
        }

                args[*numOfElem] = strdup(ptr);
                *numOfElem += 1;                                                //Increase number of elements
                ptr = strtok(NULL, delimiter);                  //set ptr to NULL
        }

        args[*numOfElem] = NULL;
}

// Main Program
int main(void)
{
        char *args[MAX_LINE/2 + 1];
        bool Ampsign = false;           //0 if no amp
        int numOfElem = 0;                      // Number of Elements

        bool Pipe = false;              //Flag to indicate we are using a pipe
    bool finished = false;  
        pid_t pid;

    while (!finished)
        {   
                Pipe = false;
        printf("osh>");//given
        fflush(stdout);

                 Input(args, &Ampsign, &numOfElem);
                 pid = fork();

                //If pid < 0 then an error has occured
                if(pid < 0)
                {
                        fprintf(stderr, "Fork Failed"); 
                        return 1;
                }

                //If pid == 0 then child created successfully 
                else if(pid == 0)
                {
                        //If the array is not empty
                        if(numOfElem != 0)
                        {
                                int file;                                               //File name
                                bool redirectInput = false;             //indicate intput file
                                bool redirectOutput = false;    //indicate output outfile

                                // check for input '<', output '>', or a '|'
                                for (int i = 0; i < numOfElem; i++)
                                {
                                        //if '<' input
                                        if(strcmp(args[i], "<") == 0)
                                        {
                                                file = open(args[i + 1], O_RDONLY);

                                                if (args[i + 1]  == NULL || file == -1)
                                                {
                                printf("Invalid Command!\n");
                                return 1;
                        }

                                                dup2(file, STDIN_FILENO);       //Any writes in standard output will be sent to file
                                                redirectInput = true;
                                                args[i] = NULL;
                                args[i + 1] = NULL;

                                                break;
                                        }
                                        //else if '>' output
                                        else if(strcmp(args[i], ">") == 0)
                                        {
                                                file = open(args[i + 1], O_WRONLY | O_CREAT);   //Will create and write to file
                                                if (args[i + 1] == NULL || file == -1)
                                                {
                                printf("Invalid Command!\n");
                                return 1;
                        }

                                                dup2(file, STDOUT_FILENO);      //Any writes in standard output will be sent to file
                                                redirectOutput = true;
                                                args[i] = NULL;                         //Sets "<" to NULL
                                args[i + 1] = NULL;

                                                break;
                                        }
                                        //pipe
                                        else if(strcmp(args[i], "|") == 0)
                                        {
                                                Pipe = true;
                        int fd[2];
                                if (pipe(fd) == -1)
                                                {
                                                        fprintf(stderr,"Pipe failed");
                                                        return 1;
                                                }

                                                //Create two arrays for the first and second set of commands
                        char *arr1[i + 1];
                        char *arr2[numOfElem - i + 1];

                                                //Fill first array
                        for (int j = 0; j < i; j++)
                                                {
                                arr1[j] = args[j];
                        }
                        arr1[i] = NULL;

                                                //Fill second array
                        for (int j = 0; j < numOfElem - i - 1; j++)
                                                {
                         arr2[j] = args[j + i + 1];
                        }
                        arr2[numOfElem - i - 1] = NULL;

                                                //Now fork a child process
                        pid_t pidPipe = fork();

                                                //Error handling
                                                if (pidPipe < 0)
                                                {
                                                        fprintf(stderr, "Fork failed.");
                                                        return 1;
                                                }
                        else if (pidPipe > 0)
                                                {
                                                        //Wait for child process to complete
                                wait(NULL);

                                                        //Close unused pipe
                                close(fd[WRITE_END]);
                                dup2(fd[READ_END], STDIN_FILENO);
                                close(fd[READ_END]);

                                                        //Error
                                if (execvp(arr2[0], arr2) == -1)
                                                        {
                                printf("Invalid Command!\n");
                                return 1;
                                }
                        }
                                                else
                                                {
                                                        //Close unused pipe
                                close(fd[READ_END]);
                                dup2(fd[WRITE_END], STDOUT_FILENO);
                                close(fd[WRITE_END]);

                                                        //Error
                                if (execvp(arr1[0], arr1) == -1)
                                                        {
                                        printf("Invalid Command!\n");
                                return 1;
                                }
                        }
                        close(fd[READ_END]);
                        close(fd[WRITE_END]);

                        break;
                                        }
                                }

                                //If no redirects
                if (Pipe == false)
                                {
                                        //Error
                    if (execvp(args[0], args) == -1)
                                        {
                        printf("Invalid Command!\n");
                        return 1;
                    }
                }

                                //Close input and output
                if (redirectInput == false) 
                                {
                    close(STDIN_FILENO);

                }
                                else if (redirectOutput == false)
                                {
                    close(STDOUT_FILENO);
                }
                close(file);
                        }
                }
                //Parent  
                else
                {
                        //If there is no ampersand '&', then parent will wait
                        if(Ampsign == false)
                        {
                                wait(NULL);
                        }
                }
    }
        return 0;
}
//main finished
osh>

osh> ls
DateClient.java  fig3-30.c  fig3-32.c  fig3-33.c  fig3-35.c       multi-fork    newproc-posix.c  output_file      pid.c  shell.c            shm-posix-consumer.c  simple-shell    unix_pipe.c         win32-pipe-parent.c
DateServer.java  fig3-31.c  fig3-33    fig3-34.c  input_file.txt  multi-fork.c  newproc-win32.c  output_file.txt  shell  SHELL_OUTPUTS.txt  shm-posix-producer.c  simple-shell.c  win32-pipe-child.c
osh> 


//=============================================================================================================================================================================================================
osh> exit
osc@ubuntu:~/final-src-osc10e/ch3$ 
//===============================================================================================================================================================================================================

osh> ls -l
total 152
-rw-rw-r-- 1 osc osc   710 Jan  3  2018 DateClient.java
-rw-rw-r-- 1 osc osc   810 Jun 18  2018 DateServer.java
-rw-rw-r-- 1 osc osc   361 Jun 18  2018 fig3-30.c
-rw-rw-r-- 1 osc osc   121 Jan  3  2018 fig3-31.c
-rw-rw-r-- 1 osc osc   136 Jan  3  2018 fig3-32.c
-rwxrwxr-x 1 osc osc 10288 Mar 15 16:11 fig3-33
-rw-rw-r-- 1 osc osc   509 Mar 15 16:11 fig3-33.c
-rw-rw-r-- 1 osc osc   680 Jun 18  2018 fig3-34.c
-rw-rw-r-- 1 osc osc   534 Jun 18  2018 fig3-35.c
-rw-rw-r-- 1 osc osc     2 Mar 15 17:47 input_file.txt
-rwxrwxr-x 1 osc osc  8712 Jan 30  2018 multi-fork
-rw-rw-r-- 1 osc osc   257 Jan 30  2018 multi-fork.c
-rw-rw-r-- 1 osc osc   780 Jan 28  2018 newproc-posix.c
-rw-rw-r-- 1 osc osc  1413 Jan  3  2018 newproc-win32.c
-rw---S--T 1 osc osc     0 Mar 15 16:45 output_file
-rw---S--T 1 osc osc   340 Mar 15 17:51 output_file.txt
-rw-r--r-- 1 osc osc  2976 Jun 18  2018 pid.c
-rwxrwxr-x 1 osc osc 17312 Mar 15 18:41 shell
-rw-rw-r-- 1 osc osc  6525 Mar 15 18:42 shell.c
-rw-rw-r-- 1 osc osc  6549 Mar 15 18:46 SHELL_OUTPUTS.txt
-rw-rw-r-- 1 osc osc  1115 Jun 18  2018 shm-posix-consumer.c
-rw-rw-r-- 1 osc osc  1434 Jun 18  2018 shm-posix-producer.c
-rwxrwxr-x 1 osc osc 10112 Mar 15 16:15 simple-shell
-rw-rw-r-- 1 osc osc   707 Jun 18  2018 simple-shell.c
-rw-rw-r-- 1 osc osc  1219 Jan  3  2018 unix_pipe.c
-rw-rw-r-- 1 osc osc   755 Jan  3  2018 win32-pipe-child.c
-rw-rw-r-- 1 osc osc  2236 Jan  3  2018 win32-pipe-parent.c

===================================================================================================================================================================================================================

osh> !!
total 156
-rw-rw-r-- 1 osc osc   710 Jan  3  2018 DateClient.java
-rw-rw-r-- 1 osc osc   810 Jun 18  2018 DateServer.java
-rw-rw-r-- 1 osc osc   361 Jun 18  2018 fig3-30.c
-rw-rw-r-- 1 osc osc   121 Jan  3  2018 fig3-31.c
-rw-rw-r-- 1 osc osc   136 Jan  3  2018 fig3-32.c
-rwxrwxr-x 1 osc osc 10288 Mar 15 16:11 fig3-33
-rw-rw-r-- 1 osc osc   509 Mar 15 16:11 fig3-33.c
-rw-rw-r-- 1 osc osc   680 Jun 18  2018 fig3-34.c
-rw-rw-r-- 1 osc osc   534 Jun 18  2018 fig3-35.c
-rw-rw-r-- 1 osc osc     2 Mar 15 17:47 input_file.txt
-rwxrwxr-x 1 osc osc  8712 Jan 30  2018 multi-fork
-rw-rw-r-- 1 osc osc   257 Jan 30  2018 multi-fork.c
-rw-rw-r-- 1 osc osc   780 Jan 28  2018 newproc-posix.c
-rw-rw-r-- 1 osc osc  1413 Jan  3  2018 newproc-win32.c
-rw---S--T 1 osc osc     0 Mar 15 16:45 output_file
-rw---S--T 1 osc osc   340 Mar 15 17:51 output_file.txt
-rw-r--r-- 1 osc osc  2976 Jun 18  2018 pid.c
-rwxrwxr-x 1 osc osc 17312 Mar 15 18:41 shell
-rw-rw-r-- 1 osc osc  6525 Mar 15 18:42 shell.c
-rw-rw-r-- 1 osc osc  9114 Mar 15 18:48 SHELL_OUTPUTS.txt
-rw-rw-r-- 1 osc osc  1115 Jun 18  2018 shm-posix-consumer.c
-rw-rw-r-- 1 osc osc  1434 Jun 18  2018 shm-posix-producer.c
-rwxrwxr-x 1 osc osc 10112 Mar 15 16:15 simple-shell
-rw-rw-r-- 1 osc osc   707 Jun 18  2018 simple-shell.c
-rw-rw-r-- 1 osc osc  1219 Jan  3  2018 unix_pipe.c
-rw-rw-r-- 1 osc osc   755 Jan  3  2018 win32-pipe-child.c
-rw-rw-r-- 1 osc osc  2236 Jan  3  2018 win32-pipe-parent.c
osh> 

=============================================================================================================================================================================================================================

osh> ls > output_file.txt
Output saved to the file
osh> 
DateClient.java
DateServer.java
fig3-30.c
fig3-31.c
fig3-32.c
fig3-33
fig3-33.c
fig3-34.c
fig3-35.c
input_file.txt
multi-fork
multi-fork.c
newproc-posix.c
newproc-win32.c
output_file
output_file.txt
pid.c
shell
shell.c
SHELL_OUTPUTS.txt
shm-posix-consumer.c
shm-posix-producer.c
simple-shell
simple-shell.c
unix_pipe.c
win32-pipe-child.c
win32-pipe-parent.c

=========================================================================================================================================================================================

=====================================================================================================================================================================================

osh> < input_file.txt > output_file.txt
Output saved to the file./output_file.txt

================================================================================================================================================================================
ls -l in input_file.txt
osh> ls < input_file.txt 
Reading from file: ./input_file.txt
total 160
-rw-rw-r-- 1 osc osc   710 Jan  3  2018 DateClient.java
-rw-rw-r-- 1 osc osc   810 Jun 18  2018 DateServer.java
-rw-rw-r-- 1 osc osc   361 Jun 18  2018 fig3-30.c
-rw-rw-r-- 1 osc osc   121 Jan  3  2018 fig3-31.c
-rw-rw-r-- 1 osc osc   136 Jan  3  2018 fig3-32.c
-rwxrwxr-x 1 osc osc 10288 Mar 15 16:11 fig3-33
-rw-rw-r-- 1 osc osc   509 Mar 15 16:11 fig3-33.c
-rw-rw-r-- 1 osc osc   680 Jun 18  2018 fig3-34.c
-rw-rw-r-- 1 osc osc   534 Jun 18  2018 fig3-35.c
-rw-rw-r-- 1 osc osc     6 Mar 15 19:10 input_file.txt
-rwxrwxr-x 1 osc osc  8712 Jan 30  2018 multi-fork
-rw-rw-r-- 1 osc osc   257 Jan 30  2018 multi-fork.c
-rw-rw-r-- 1 osc osc   780 Jan 28  2018 newproc-posix.c
-rw-rw-r-- 1 osc osc  1413 Jan  3  2018 newproc-win32.c
-rw---S--T 1 osc osc     0 Mar 15 18:52 output_file
-rw---S--T 1 osc osc     0 Mar 15 19:07 output_file.txt
-rw---S--T 1 osc osc    11 Mar 15 19:02 out.txt
-rw-r--r-- 1 osc osc  2976 Jun 18  2018 pid.c
-rwxrwxr-x 1 osc osc 17312 Mar 15 18:41 shell
-rw-rw-r-- 1 osc osc  6510 Mar 15 19:05 shell.c
-rw-rw-r-- 1 osc osc 12814 Mar 15 19:10 SHELL_OUTPUTS.txt
-rw-rw-r-- 1 osc osc  1115 Jun 18  2018 shm-posix-consumer.c
-rw-rw-r-- 1 osc osc  1434 Jun 18  2018 shm-posix-producer.c
-rwxrwxr-x 1 osc osc 10112 Mar 15 16:15 simple-shell
-rw-rw-r-- 1 osc osc   707 Jun 18  2018 simple-shell.c
-rw-rw-r-- 1 osc osc  1219 Jan  3  2018 unix_pipe.c
-rw-rw-r-- 1 osc osc   755 Jan  3  2018 win32-pipe-child.c
-rw-rw-r-- 1 osc osc  2236 Jan  3  2018 win32-pipe-parent.c
osh> 

======================================================================================================================================================================================
osh> ls -l | less
total 236
-rw---S--T 1 osc osc   390 Mar 20 23:50 >
-rw-r--r-- 1 osc osc  1640 Mar 20 23:58 a
-rw-r--r-- 1 osc osc  1732 Mar 25 23:31 d
-rw-rw-r-- 1 osc osc   710 Jan  3  2018 DateClient.java
-rw-rw-r-- 1 osc osc   810 Jun 18  2018 DateServer.java
-rw-rw-r-- 1 osc osc   361 Jun 18  2018 fig3-30.c
-rw-rw-r-- 1 osc osc   121 Jan  3  2018 fig3-31.c
-rw-rw-r-- 1 osc osc   136 Jan  3  2018 fig3-32.c
-rwxrwxr-x 1 osc osc 10288 Mar 15 16:11 fig3-33
-rw-rw-r-- 1 osc osc   509 Mar 15 16:11 fig3-33.c
-rw-rw-r-- 1 osc osc   680 Jun 18  2018 fig3-34.c
: